name: Build & Deploy Python API to Azure Container Apps

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - "api-python/**"
      - "Dockerfile"
      - "pyproject.toml"

permissions:
  id-token: write
  contents: read

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}
  RG:       ${{ secrets.AZURE_RG }}
  ENV_NAME: ${{ secrets.AZURE_ENV }}
  APP_NAME: ${{ secrets.AZURE_APP }}
  WORKER_NAME: ${{ secrets.AZURE_WORKER }}
  JOB_NAME: ${{ secrets.AZURE_JOB }}
  IMAGE:   api-python:${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          credentials: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR login
        run: az acr login -n $ACR_NAME

      - name: Build & push image to ACR
        working-directory: ./api-python
        run: |
          docker build -t $ACR_NAME.azurecr.io/$IMAGE .
          docker push $ACR_NAME.azurecr.io/$IMAGE

      - name: Enable ACR admin & get creds
        id: acr
        run: |
          az acr update -n $ACR_NAME --admin-enabled true
          echo "USR=$(az acr credential show -n $ACR_NAME --query username -o tsv)" >> $GITHUB_OUTPUT
          echo "PWD=$(az acr credential show -n $ACR_NAME --query passwords[0].value -o tsv)" >> $GITHUB_OUTPUT

      - name: Create/Update API Container App
        run: |
          set -e
          IMG="$ACR_NAME.azurecr.io/$IMAGE"
          if ! az containerapp show -g "$RG" -n "$APP_NAME" >/dev/null 2>&1; then
            az containerapp create -g "$RG" -n "$APP_NAME" --environment "$ENV_NAME" \
              --image "$IMG" \
              --registry-server "$ACR_NAME.azurecr.io" --registry-username "${{ steps.acr.outputs.USR }}" --registry-password "${{ steps.acr.outputs.PWD }}" \
              --ingress external --target-port 8000 \
              --secrets db-url="${{ secrets.DATABASE_URL }}" redis-url="${{ secrets.REDIS_URL }}" blob-conn="${{ secrets.AZURE_BLOB_CONNECTION_STRING }}" clerk-issuer="${{ secrets.CLERK_ISSUER }}" clerk-jwks="${{ secrets.CLERK_JWKS_URL }}" clerk-aud="${{ secrets.CLERK_AUDIENCE }}" \
              --env-vars \
                ENV=dev \
                PORT=8000 \
                LOG_LEVEL=INFO \
                DATABASE_URL=secretref:db-url \
                REDIS_URL=secretref:redis-url \
                AZURE_BLOB_CONNECTION_STRING=secretref:blob-conn \
                CLERK_ISSUER=secretref:clerk-issuer \
                CLERK_JWKS_URL=secretref:clerk-jwks \
                CLERK_AUDIENCE=secretref:clerk-aud \
                CORS_ORIGINS='${{ secrets.CORS_JSON }}' \
                DOC_INTEL_MODEL=prebuilt-resume \
                DOC_INTEL_API_VERSION=2024-07-31 \
                DOC_INTEL_POLL_SECONDS=1 \
                DOC_INTEL_POLL_ATTEMPTS=3 \
                PYTHONUNBUFFERED=1 \
              --min-replicas 1 --max-replicas 3
          else
            az containerapp update -g "$RG" -n "$APP_NAME" \
              --image "$IMG" \
              --registry-server "$ACR_NAME.azurecr.io" --registry-username "${{ steps.acr.outputs.USR }}" --registry-password "${{ steps.acr.outputs.PWD }}" \
              --secrets db-url="${{ secrets.DATABASE_URL }}" redis-url="${{ secrets.REDIS_URL }}" blob-conn="${{ secrets.AZURE_BLOB_CONNECTION_STRING }}" clerk-issuer="${{ secrets.CLERK_ISSUER }}" clerk-jwks="${{ secrets.CLERK_JWKS_URL }}" clerk-aud="${{ secrets.CLERK_AUDIENCE }}" \
              --set-env-vars \
                ENV=dev \
                PORT=8000 \
                LOG_LEVEL=INFO \
                DATABASE_URL=secretref:db-url \
                REDIS_URL=secretref:redis-url \
                AZURE_BLOB_CONNECTION_STRING=secretref:blob-conn \
                CLERK_ISSUER=secretref:clerk-issuer \
                CLERK_JWKS_URL=secretref:clerk-jwks \
                CLERK_AUDIENCE=secretref:clerk-aud \
                CORS_ORIGINS='${{ secrets.CORS_JSON }}' \
                DOC_INTEL_MODEL=prebuilt-resume \
                DOC_INTEL_API_VERSION=2024-07-31 \
                DOC_INTEL_POLL_SECONDS=1 \
                DOC_INTEL_POLL_ATTEMPTS=3 \
                PYTHONUNBUFFERED=1
          fi

      - name: Create/Update Migrations Job (and run)
        run: |
          set -e
          IMG="$ACR_NAME.azurecr.io/$IMAGE"
          if ! az containerapp job show -g "$RG" -n "$JOB_NAME" >/dev/null 2>&1; then
            az containerapp job create -g "$RG" -n "$JOB_NAME" --environment "$ENV_NAME" \
              --image "$IMG" \
              --registry-server "$ACR_NAME.azurecr.io" --registry-username "${{ steps.acr.outputs.USR }}" --registry-password "${{ steps.acr.outputs.PWD }}" \
              --secrets db-url="${{ secrets.DATABASE_URL }}" \
              --env-vars DATABASE_URL=secretref:db-url \
              --replica-timeout 1800 --parallelism 1 --replica-completion-count 1 \
              --trigger-type Manual \
              --command "bash" --args "-lc" "python -m alembic upgrade head"
          else
            az containerapp job update -g "$RG" -n "$JOB_NAME" \
              --image "$IMG" \
              --registry-server "$ACR_NAME.azurecr.io" --registry-username "${{ steps.acr.outputs.USR }}" --registry-password "${{ steps.acr.outputs.PWD }}" \
              --secrets db-url="${{ secrets.DATABASE_URL }}" \
              --set-env-vars DATABASE_URL=secretref:db-url \
              --command "bash" --args "-lc" "python -m alembic upgrade head"
          fi
          az containerapp job start -g "$RG" -n "$JOB_NAME"

      - name: Create/Update Celery Worker (no ingress)
        run: |
          set -e
          IMG="$ACR_NAME.azurecr.io/$IMAGE"
          if ! az containerapp show -g "$RG" -n "$WORKER_NAME" >/dev/null 2>&1; then
            az containerapp create -g "$RG" -n "$WORKER_NAME" --environment "$ENV_NAME" \
              --image "$IMG" \
              --registry-server "$ACR_NAME.azurecr.io" --registry-username "${{ steps.acr.outputs.USR }}" --registry-password "${{ steps.acr.outputs.PWD }}" \
              --secrets db-url='${{ secrets.DATABASE_URL }}' redis-url='${{ secrets.REDIS_URL }}' blob-conn='${{ secrets.AZURE_BLOB_CONNECTION_STRING }}' \
              --env-vars \
                ENV=dev \
                DATABASE_URL=secretref:db-url \
                REDIS_URL=secretref:redis-url \
                AZURE_BLOB_CONNECTION_STRING=secretref:blob-conn \
                PYTHONUNBUFFERED=1 \
              --min-replicas 1 --max-replicas 3 \
              --command "celery" --args "-A" "app.workers.celery_app.celery_app" "worker" "-Q" "default" "-l" "INFO"
          else
            az containerapp update -g "$RG" -n "$WORKER_NAME" \
              --image "$IMG" \
              --registry-server "$ACR_NAME.azurecr.io" --registry-username "${{ steps.acr.outputs.USR }}" --registry-password "${{ steps.acr.outputs.PWD }}" \
              --secrets db-url='${{ secrets.DATABASE_URL }}' redis-url='${{ secrets.REDIS_URL }}' blob-conn='${{ secrets.AZURE_BLOB_CONNECTION_STRING }}' \
              --set-env-vars \
                ENV=dev \
                DATABASE_URL=secretref:db-url \
                REDIS_URL=secretref:redis-url \
                AZURE_BLOB_CONNECTION_STRING=secretref:blob-conn \
                PYTHONUNBUFFERED=1 \
              --command "celery" --args "-A" "app.workers.celery_app.celery_app" "worker" "-Q" "default" "-l" "INFO"
          fi

      - name: Print API URL
        run: |
          FQDN=$(az containerapp show -g "$RG" -n "$APP_NAME" --query properties.configuration.ingress.fqdn -o tsv || true)
          echo "API URL: https://$FQDN"